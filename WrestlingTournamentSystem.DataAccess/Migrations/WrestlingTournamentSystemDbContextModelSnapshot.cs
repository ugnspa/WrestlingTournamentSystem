// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WrestlingTournamentSystem.DataAccess.Data;

#nullable disable

namespace WrestlingTournamentSystem.DataAccess.Migrations
{
    [DbContext(typeof(WrestlingTournamentSystemDbContext))]
    partial class WrestlingTournamentSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WrestlersTournamentsWeightCategories", b =>
                {
                    b.Property<int>("fk_TournamentWeightCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("fk_WrestlerId")
                        .HasColumnType("int");

                    b.HasKey("fk_TournamentWeightCategoryId", "fk_WrestlerId");

                    b.HasIndex("fk_WrestlerId");

                    b.ToTable("WrestlersTournamentsWeightCategories");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.TournamentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("TournamentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Registration"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Finished"
                        });
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.TournamentWeightCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("fk_TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("fk_WeightCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("fk_TournamentId");

                    b.HasIndex("fk_WeightCategoryId");

                    b.ToTable("TournamentWeightCategories");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.TournamentWeightCategoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("TournamentWeightCategoryStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Registration"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Weigh-In"
                        },
                        new
                        {
                            Id = 4,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Finished"
                        });
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.WeightCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PrimaryCategory")
                        .HasColumnType("bit");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("WeightCategories");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.Wrestler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Wrestlers");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.WrestlingStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("WrestlingStyles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GR"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WW"
                        },
                        new
                        {
                            Id = 4,
                            Name = "BW"
                        });
                });

            modelBuilder.Entity("WrestlersTournamentsWeightCategories", b =>
                {
                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.TournamentWeightCategory", null)
                        .WithMany()
                        .HasForeignKey("fk_TournamentWeightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.Wrestler", null)
                        .WithMany()
                        .HasForeignKey("fk_WrestlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.Tournament", b =>
                {
                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.TournamentStatus", "TournamentStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TournamentStatus");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.TournamentWeightCategory", b =>
                {
                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.TournamentWeightCategoryStatus", "TournamentWeightCategoryStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.Tournament", "Tournament")
                        .WithMany("TournamentWeightCategories")
                        .HasForeignKey("fk_TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.WeightCategory", "WeightCategory")
                        .WithMany()
                        .HasForeignKey("fk_WeightCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");

                    b.Navigation("TournamentWeightCategoryStatus");

                    b.Navigation("WeightCategory");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.WeightCategory", b =>
                {
                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.WrestlingStyle", "WrestlingStyle")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WrestlingStyle");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.Wrestler", b =>
                {
                    b.HasOne("WrestlingTournamentSystem.DataAccess.Entities.WrestlingStyle", "WrestlingStyle")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WrestlingStyle");
                });

            modelBuilder.Entity("WrestlingTournamentSystem.DataAccess.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentWeightCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
